[config]
unstable_features = ["CTRL_C_HANDLING"]

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true # Remove this if it's not in a workspace
THRESHOLD_FHE_DOCKER_FOLDER = "docker/local.dockerfile"
THRESHOLD_FHE_DOCKER_ROOT = "." # use "../../" when in a workspace, "." otherwise.

###Generic commands to be used for local deployment with docker
#Build the image for TFHE parties, with testing feature to allow centralized DKG
#NOTE(Titouan): I believe testing feature doesn't have any real impact on performances, it's mostly to avoid having testing code silently spill
#into production.
[tasks.tfhe-docker-image]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,choreographer,default", "-t", "tfhe-core", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-3]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,choreographer,extension_degree_3", "-t", "tfhe-core-degree-3", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-4]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,choreographer,extension_degree_4", "-t", "tfhe-core-degree-4", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-5]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,choreographer,extension_degree_5", "-t", "tfhe-core-degree-5", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-6]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,choreographer,extension_degree_6", "-t", "tfhe-core-degree-6", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-7]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,choreographer,extension_degree_7", "-t", "tfhe-core-degree-7", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-8]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,choreographer,extension_degree_8", "-t", "tfhe-core-degree-8", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-3-mem]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,measure_memory,extension_degree_3", "-t", "tfhe-core-degree-3-mem", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-4-mem]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,measure_memory,extension_degree_4", "-t", "tfhe-core-degree-4-mem", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-5-mem]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,measure_memory,extension_degree_5", "-t", "tfhe-core-degree-5-mem", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-6-mem]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,measure_memory,extension_degree_6", "-t", "tfhe-core-degree-6-mem", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-7-mem]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,measure_memory,extension_degree_7", "-t", "tfhe-core-degree-7-mem", "${THRESHOLD_FHE_DOCKER_ROOT}"]

[tasks.tfhe-docker-image-degree-8-mem]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=testing,measure_memory,extension_degree_8", "-t", "tfhe-core-degree-8-mem", "${THRESHOLD_FHE_DOCKER_ROOT}"]

#Build the image for BGV parties (with centralized DKG available)
[tasks.bgv-docker-image]
command = "docker"
args = ["build", "-f", "${THRESHOLD_FHE_DOCKER_FOLDER}", "--build-arg", "FEATURES=default,experimental", "-t", "bgv-core", "${THRESHOLD_FHE_DOCKER_ROOT}"]

#Generate the certificate for TLS communication of the parties
[tasks.gen-test-certs]
command = "cargo"
args = ["run", "--release", "--bin", "threshold-gen-tls-certs", "--", "--ca-prefix", "p", "--ca-count", "${NUM_PARTIES}", "-o", "test_certs"]

#Generate the toml config file for the choreographer for a cluster of parties accessible from localhost
[tasks.gen-local-choreo]
command = "cargo"
args = ["run", "--bin", "gen-experiment", "--release", "--features", "templating", "--", "-n", "${NUM_PARTIES}", "-t", "${THRESHOLD}", "-f", "temp", "-o", "local-cluster", "choreographer"]

#Generate the yml config file for the dockerized parties
[tasks.tfhe-gen-local-cluster]
command = "cargo"
args = ["run", "--bin", "gen-experiment", "--release", "--features", "templating", "--", "-n", "${NUM_PARTIES}", "-o", "tfhe-local-cluster", "-f", "temp", "parties", "--protocol", "tfhe"]

#Generate the yml config file for the dockerized parties
[tasks.bgv-gen-local-cluster]
command = "cargo"
args = ["run", "--bin", "gen-experiment", "--release", "--features", "templating", "--", "-n", "${NUM_PARTIES}", "-o", "bgv-local-cluster", "-f", "temp", "parties", "--protocol", "bgv"]

#Generate docker-compose file for the TFHE parties as well as the toml config file for the choreogrpaher for a local deployment
[tasks.tfhe-gen-experiment]
command = "cargo"
args = ["run", "--bin", "gen-experiment", "--features", "templating", "--", "-n", "${NUM_PARTIES}", "-t", "${THRESHOLD}", "-f", "temp", "-o", "${EXPERIMENT_NAME}", "all", "--protocol", "tfhe" ]

#Generate docker-compose file for the BGV parties as well as the toml config file for the choreogrpaher for a local deployment
[tasks.bgv-gen-experiment]
command = "cargo"
args = ["run", "--bin", "gen-experiment", "--features", "templating", "--", "-n", "${NUM_PARTIES}", "-t", "${THRESHOLD}", "-f", "temp", "-o", "${EXPERIMENT_NAME}" , "all", "--protocol", "bgv"]


#Bring parties alive based on provided yml file
[tasks.start-parties]
command = "docker"
args = ["compose", "--progress=quiet", "-f", "temp/${EXPERIMENT_NAME}.yml", "up", "--quiet-pull"]

#Stop all parties
[tasks.stop-parties]
script = '''
docker compose -f temp/${EXPERIMENT_NAME}.yml logs > temp/${EXPERIMENT_NAME}.log
docker compose --progress=quiet -f temp/${EXPERIMENT_NAME}.yml down
'''


###One liner for benching everything
[tasks.experiment-name]
script = '''
echo ""
echo ""
echo "========================================================="
echo "=                                                       ="
echo "= Experiment: ${EXPERIMENT_NAME}                        "
echo "=                                                       "
echo "= Parties: ${NUM_PARTIES}                               "
echo "= Threshold: ${THRESHOLD}                               "
echo "=                                                       ="
echo "========================================================="
echo ""
echo ""
'''

#Shut down the parties and do some file management
[tasks.shutdown]
script = '''
mkdir -p temp/stats
docker stats --no-stream > temp/stats/${EXPERIMENT_NAME}_$(date +%Y_%m_%d-%H:%M:%S).log
docker compose -f temp/${EXPERIMENT_NAME}.yml logs > temp/${EXPERIMENT_NAME}.log
docker compose --progress=quiet -f temp/${EXPERIMENT_NAME}.yml down
mkdir -p temp/telemetry/archived
mv temp/telemetry/export.json temp/telemetry/archived/trace_${EXPERIMENT_NAME}_$(date +%Y_%m_%d-%H:%M:%S).json
'''

[tasks.setup]
script = '''
mkdir -p temp/telemetry
echo "" > temp/telemetry/export.json
chmod o+w temp/telemetry/export.json
'''

#Bring parties alive based on provided yml file, waiting for health check to pass
[tasks.start-parties-healthy]
command = "docker"
args = ["compose", "--progress=quiet", "-f", "temp/${EXPERIMENT_NAME}.yml", "up", "--quiet-pull", "--wait"]

#Run the full test suite for tfhe with real dkg
[tasks.tfhe-test-real-dkg]
command = "sh"
args = ["test_scripts/tfhe_test_script_real_dkg.sh", "temp/${EXPERIMENT_NAME}.toml"]

#Run the full test suite for tfhe with centralized dkg
[tasks.tfhe-test-fake-dkg]
command = "sh"
args = ["test_scripts/tfhe_test_script_fake_dkg.sh", "temp/${EXPERIMENT_NAME}.toml"]

#Run the full test suite for tfhe with real dkg
[tasks.bgv-test-real-dkg]
command = "sh"
args = ["test_scripts/bgv_test_script_real_dkg.sh", "temp/${EXPERIMENT_NAME}.toml"]

#Run the full test suite for tfhe with centralized dkg
[tasks.bgv-test-fake-dkg]
command = "sh"
args = ["test_scripts/bgv_test_script_fake_dkg.sh", "temp/${EXPERIMENT_NAME}.toml"]

[tasks.tfhe-bench-run]
env = {"NUM_PARTIES" = "4", THRESHOLD = "1", EXPERIMENT_NAME="tfhe-bench-run"}
run_task = { name = ["setup", "gen-test-certs", "tfhe-gen-experiment", "experiment-name", "start-parties-healthy"], fork = true}

[tasks.bgv-bench-run]
env = {"NUM_PARTIES" = "4", THRESHOLD = "1", EXPERIMENT_NAME="bgv-bench-run"}
run_task = { name = ["setup", "gen-test-certs", "bgv-gen-experiment", "experiment-name", "start-parties-healthy"], fork = true}

##For TFHE we set NUM_PARTIES to 5 to be able to test both small and large sessions
[tasks.tfhe-bench-fake-dkg]
env = {"NUM_PARTIES" = "5", THRESHOLD = "1", EXPERIMENT_NAME="tfhe-fake-dkg-bench"}
run_task = { name = ["setup", "gen-test-certs", "tfhe-gen-experiment", "experiment-name", "start-parties-healthy", "tfhe-test-fake-dkg"], fork = true, cleanup_task = "shutdown" }

[tasks.tfhe-bench-real-dkg]
env = {"NUM_PARTIES" = "5", THRESHOLD = "1", EXPERIMENT_NAME="tfhe-real-dkg-bench"}
run_task = { name = ["setup", "gen-test-certs", "tfhe-gen-experiment", "experiment-name", "start-parties-healthy", "tfhe-test-real-dkg"], fork = true, cleanup_task = "shutdown" }

##For BGV we set NUM_PARTIES to 4 as we only need small sessions
[tasks.bgv-bench-fake-dkg]
env = {"NUM_PARTIES" = "4", THRESHOLD = "1", EXPERIMENT_NAME="bgv-fake-dkg-bench"}
run_task = { name = ["setup", "gen-test-certs", "bgv-gen-experiment", "experiment-name", "start-parties-healthy", "bgv-test-fake-dkg"], fork = true, cleanup_task = "shutdown" }

[tasks.bgv-bench-real-dkg]
env = {"NUM_PARTIES" = "4", THRESHOLD = "1", EXPERIMENT_NAME="bgv-real-dkg-bench"}
run_task = { name = ["setup", "gen-test-certs", "bgv-gen-experiment", "experiment-name", "start-parties-healthy", "bgv-test-real-dkg"], fork = true, cleanup_task = "shutdown" }
